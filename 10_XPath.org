* XPath
  Описание пути + условия. Представляет XML/HTML как дерево (структуру)

* Basics
   - / :: корень, разделитель
   - <element name> :: имя тэга или $*$ — любой элемент
   - @<attname> :: имя атрибута
   - // :: любые потомки
   - [cond] :: условие (например, @price < 50)
   - [N] :: N-ый элемент из списка (индексация)
   - contains(s1, s2) :: различные функции; эта проверяет, что строка s1 содержит подстроку s2
* Примеры
   #+NAME: load_xml
   #+begin_src python :exports none
     from lxml import etree
     from bs4 import BeautifulSoup as bs

     with open("BookstoreQ.xml", "r") as fd:
         data = fd.read()

     tree = etree.XML(data)
     soup = bs(data, "xml")
   #+end_src

** I
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
             SIMPLE PATH EXPRESSION
             All book titles
     ,****************************************************************"""

     print(tree.xpath("/Bookstore/Book/Title"))
   #+end_src

** II
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        ALTERNATIVES (UNION)
        All book or magazine titles
     ,****************************************************************"""

     print(tree.xpath("(/Bookstore/Book/Title|/Bookstore/Magazine/Title)"))
   #+end_src
** III
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        WILDCARD
        All titles
     ,****************************************************************"""

     print(tree.xpath("/Bookstore/*/Title"))
   #+end_src
** IV
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        OPERATOR // (ALL DESCENDANTS)
        All titles
     ,****************************************************************"""

     print(tree.xpath("//Title"))
   #+end_src
** V
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        COMBINING // AND WILDCARD
        All elements
     ,****************************************************************"""

     print(tree.xpath("//*"))
   #+end_src
** VI
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        SELECTING ATTRIBUTES
        All book ISBNs
        (error, then fix)
     ,****************************************************************"""

     print(tree.xpath("/Bookstore/Book/@ISBN"))
   #+end_src
** VII
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        PATH WITH CONDITION
        All books costing less than $90
     ,****************************************************************"""

     print(tree.xpath("/Bookstore/Book[@Price < 90]"))
   #+end_src
** VIII
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        CONDITION INSIDE PATH
        Titles of books costing less than $90
     ,****************************************************************"""

     print(tree.xpath("/Bookstore/Book[@Price < 90]/Title"))
   #+end_src
** IX
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        EXISTENCE CONDITION
        Titles of books containing a remark
     ,****************************************************************"""

     print(tree.xpath("/Bookstore/Book[Remark]/Title"))
   #+end_src
** X
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        COMPLEX CONDITION
        Titles of books costing less than $90 where "Ullman" is
        an author
     ,****************************************************************"""

     print(tree.xpath(
         '/Bookstore/Book[@Price < 90 and '
         'Authors/Author/Last_Name = "Ullman"]/Title'
     ))
   #+end_src
** XI
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        Same query but "Jeffrey Ullman" is an author
        (demonstrate error then fix)
     ,****************************************************************"""

     print(tree.xpath(
         '/Bookstore/Book[@Price < 90 and '
         'Authors/Author/Last_Name = "Ullman" and '
         'Authors/Author/First_Name="Jeffrey"]/Title'
     ))

     print(tree.xpath(
         '/Bookstore/Book[@Price < 90 and '
         'Authors/Author/Last_Name = "Widom" and '
         'Authors/Author/First_Name="Jeffrey"]/Title'
     ))

     print(tree.xpath(
         '/Bookstore/Book[@Price < 90 and '
         'Authors/Author[Last_Name = "Ullman" and '
         'First_Name="Jeffrey"]]/Title'
     ))
   #+end_src
** XII
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        NEGATION
        Titles of books where "Ullman" is an author and "Widom" is
        not an author
        (attempt, can't do)
     ,****************************************************************"""

     print(tree.xpath(
         '/Bookstore/Book['
         'Authors/Author/Last_Name = "Ullman" and '
         'Authors/Author/Last_Name != "Widom"]/Title'
     ))
   #+end_src
** XIII
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        Nth ELEMENT
        All second authors, third, tenth authors
     ,****************************************************************"""

     print(tree.xpath("//Authors/Author[2]"))
     print(tree.xpath("//Authors/Author[3]"))
     print(tree.xpath("//Authors/Author[10]"))
   #+end_src
** XIV
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        CONTAINS() PREDICATE
        Titles of books with a remark containing "great"
     ,****************************************************************"""

     print(tree.xpath('//Book[contains(Remark, "great")]/Title'))
   #+end_src
** XV
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        "SELF-JOIN"
        All magazines where there's a book with the same title
     ,****************************************************************"""

     print(tree.xpath("//Magazine[Title = //Book/Title]"))
   #+end_src
** XVI
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        PARENT AXIS AND NAME() FUNCTION
        All elements whose parent tag is not "Bookstore" or "Book"
     ,****************************************************************"""

     print(tree.xpath(
         '/Bookstore//*[name(parent::*) != "Bookstore" '
         'and name(parent::*) != "Book"]'
     ))
   #+end_src
** XVII
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        SIBLING AXIS
        All books and magazines with non-unique titles
        (not quite right, then fix)
     ,****************************************************************"""

     print(tree.xpath(
         '(/Bookstore/Book/Title|/Bookstore/Magazine/Title)[Title = following-sibling::*/Title]'
     ))

     print(tree.xpath(
         '(/Bookstore/Book|/Bookstore/Magazine)[Title = following-sibling::*/Title '
         'or Title = preceding-sibling::*/Title]'
     ))
   #+end_src
** XVIII
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        FOR-ALL (KLUDGE)
        Books where every author's first name includes "J"
     ,****************************************************************"""

     print(tree.xpath(
         "//Book["
         'count(Authors/Author[contains(First_Name, "J")]) = '
         'count(Authors/Author/First_Name)]'
     ))
   #+end_src
** XIX
   #+begin_src python :exports both :results output :noweb strip-export
     <<load_xml>>
     """***************************************************************
        NEGATION REVISITED
        Titles of books where "Ullman" is an author and "Widom" is
        not an author
     ,****************************************************************"""

     print(tree.xpath(
         '/Bookstore/Book[Authors/Author/Last_Name = "Ullman" and '
         'count(Authors/Author[Last_Name = "Widom"]) = 0]/Title'
     ))
   #+end_src
